//
//  metal_render_pass_depth_attachment.rs
//
//  Created by TR Solutions on 2020-07-18.
//  Copyright Â© 2020 TR Solutions Pte. Ltd.
//  Licensed under Apache 2.0 and MIT
//  See appropriate LICENCE files for details.
//
//! Thin wrappers for MTLRenderPassDepthAttachment struct and associated data

use objc::msg_send;
use objc::sel;
use objc::sel_impl;
use cocoa::base::{id, nil};
use objc::runtime::{objc_retain, objc_release};
use crate::MetalTexture;
use std::os::raw::c_double;
use cocoa::foundation::NSUInteger;

/// A depth render target that serves as the output destination
/// for depth pixels generated by a render pass.
pub struct MetalRenderPassDepthAttachment {
    attachment: id
}
impl Default for MetalRenderPassDepthAttachment {
    fn default() -> Self { MetalRenderPassDepthAttachment { attachment: nil } }
}
impl From<id> for MetalRenderPassDepthAttachment {
    fn from(attachment:id) -> Self {
        let attachment = unsafe { objc_retain(attachment) };
        MetalRenderPassDepthAttachment { attachment }
    }
}
impl Drop for MetalRenderPassDepthAttachment {
    fn drop(&mut self) { unsafe { objc_release(self.attachment) } }
}

impl MetalRenderPassDepthAttachment {
    /// Sets the texture object associated with this attachment.
    pub fn set_texture(&mut self, texture: &MetalTexture) {
        unsafe { msg_send![self.attachment, setTexture:texture.to_objc()] }
    }
    /// Sets the depth to use when the depth render target is cleared.
    pub fn set_clear_depth(&mut self, clear_depth: c_double) {
        unsafe { msg_send![self.attachment, setClearDepth:clear_depth]}
    }
    /// Sets the load action associated with this attachment.
    pub fn set_load_action(&mut self, load_action:NSUInteger) {
        unsafe { msg_send![self.attachment, setLoadAction:load_action] }
    }
    /// Sets the store action associated with this attachment.
    pub fn set_store_action(&mut self, store_action:NSUInteger) {
        unsafe { msg_send![self.attachment, setStoreAction:store_action] }
    }
}