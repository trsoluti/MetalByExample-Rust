//
//  metal_render_pass_descriptor.rs
//
//  Created by TR Solutions on 2020-07-12.
//  Copyright Â© 2020 TR Solutions Pte. Ltd.
//  Licensed under Apache 2.0 and MIT
//  See appropriate LICENCE files for details.
//
//! Thin wrappers for methods we use from MTLRenderPassDescriptor

use objc::class;
use objc::msg_send;
use objc::sel;
use objc::sel_impl;
use cocoa::base::{id, nil};
use objc::runtime::{objc_retain, objc_release};
use cocoa::foundation::NSUInteger;
use crate::MetalClearColor;

// From System/Library/Frameworks/Metal.framework/Headers/MTLRenderPass.h:
// typedef NS_ENUM(NSUInteger, MTLLoadAction) {
//     MTLLoadActionDontCare = 0,
//     MTLLoadActionLoad = 1,
//     MTLLoadActionClear = 2,
// } API_AVAILABLE(macos(10.11), ios(8.0));
#[allow(non_upper_case_globals)]
/// A value is written to every pixel in the specified attachment.
pub static MTLLoadActionClear: NSUInteger = 2;
// typedef NS_ENUM(NSUInteger, MTLStoreAction) {
//     MTLStoreActionDontCare = 0,
//     MTLStoreActionStore = 1,
//     MTLStoreActionMultisampleResolve = 2,
//     MTLStoreActionStoreAndMultisampleResolve API_AVAILABLE(macos(10.12), ios(10.0)) = 3,
//     MTLStoreActionUnknown API_AVAILABLE(macos(10.12), ios(10.0)) = 4,
//     MTLStoreActionCustomSampleDepthStore API_AVAILABLE(macos(10.13), ios(11.0)) = 5,
// } API_AVAILABLE(macos(10.11), ios(8.0));
#[allow(non_upper_case_globals)]
/// The final results of the rendering pass are stored in the attachment.
pub static MTLStoreActionStore: NSUInteger = 1;

/// Rust wrapper for a group of render targets
/// that hold the results of a render pass.
pub struct MetalRenderPassDescriptor {
    descriptor: id
}
impl Default for MetalRenderPassDescriptor {
    fn default() -> Self {
        MetalRenderPassDescriptor { descriptor: nil }
    }
}
impl From<id> for MetalRenderPassDescriptor {
    fn from(descriptor: id) -> Self {
        let descriptor = unsafe { objc_retain(descriptor) };
        MetalRenderPassDescriptor{ descriptor }
    }
}
impl Drop for MetalRenderPassDescriptor {
    fn drop(&mut self) {
        unsafe { objc_release(self.descriptor ) }
    }
}

impl MetalRenderPassDescriptor {
    /// Creates a default render pass descriptor.
    pub fn render_pass_descriptor() -> Self {
        let class = class!(MTLRenderPassDescriptor);
        let descriptor:id = unsafe { msg_send![class, renderPassDescriptor] };
        MetalRenderPassDescriptor::from(descriptor)
    }
    /// Returns the underlying objective c descriptor
    pub fn objc_id(&self ) -> id {
        self.descriptor
    }
    /// Sets, for the render target at the given index,
    /// the texture object associated with this attachment.
    pub fn set_color_attachments_texture(&mut self, index: NSUInteger, frame_buffer_texture: id) {
        let color_attachment = self.get_color_attachments_for_index(index);
        unsafe { msg_send![color_attachment, setTexture:frame_buffer_texture] }
    }
    /// Sets, for the render target at the given index,
    /// the color to use when the color render target is cleared.
    pub fn set_color_attachments_clear_color(&mut self, index: NSUInteger, clear_color: MetalClearColor) {
        let color_attachment = self.get_color_attachments_for_index(index);
        unsafe { msg_send![color_attachment, setClearColor:clear_color] }
    }
    /// Sets, for the render target at the given index,
    /// the action performed by this attachment at the end of a rendering pass
    /// for a render command encoder.
    pub fn set_color_attachments_store_action(&mut self, index: NSUInteger, action: NSUInteger) {
        let color_attachment = self.get_color_attachments_for_index(index);
        unsafe { msg_send![color_attachment, setStoreAction:action] }
    }
    /// Sets, for the render target at the given index,
    /// the action performed by this attachment at the start of a rendering pass
    /// for a render command encoder.
    pub fn set_color_attachments_load_action(&mut self, index: NSUInteger, action: NSUInteger) {
        let color_attachment = self.get_color_attachments_for_index(index);
        unsafe { msg_send![color_attachment, setLoadAction:action] }
    }
    /// Gets, by index, color render target that serves as the output destination
    /// for color pixels generated by a render pass.
    fn get_color_attachments_for_index(&self, index: NSUInteger) -> id {
        let color_attachments:id = unsafe { msg_send![self.descriptor, colorAttachments] };
        let color_attachment = unsafe { msg_send![color_attachments, objectAtIndexedSubscript:index] };
        color_attachment
    }

}
